<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Feedback</title>
 <!--  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/css/bootstrap-datetimepicker.min.css">
 -->
</head>
<body>
    <div class="container">
        <h1>Feedback Form</h1>

        <form  id="reg">

            <div>
                <label for="csvFile">Upload CSV:</label>
                <input type="file" id="csvFile" name="csvFile" accept=".csv" required>
            </div>
            
            <div><br>
                <legend>Completed:</legend>
                <label for="False"><input type="radio" id="False" value="False" name="Done" required/>False</label> 
            </div>
            <br>
            <div>
                <label for="subject">Event_Name:</label>
                <select id="subject">
                    <!-- Options will be dynamically populated here -->
                </select>
            </div>

            <button type="submit">Send Form</button>
        </form>
    </div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.47/js/bootstrap-datetimepicker.min.js"></script>


    <script>
        // Declare variables
        fetch('/student/events') // Assuming the route is '/student/events' and it returns event data
            .then(response => response.json())
            .then(events => {
                const selectElement = document.getElementById('subject');
                events.forEach(event => {
                    const option = document.createElement('option');
                    option.value = event.title; // Assuming '_id' is the unique identifier for events
                    option.textContent = event.title; // Assuming 'title' is the name/title of the event
                    selectElement.appendChild(option);
                });
            })
            .catch(error => console.error('Error fetching events:', error));
        document.getElementById('reg').addEventListener('submit', async function(event) {
         event.preventDefault();
 
         // Read the uploaded CSV file
         const csvFile = document.getElementById('csvFile').files[0]; // Access the file directly from the input element
         const csvData = await readFile(csvFile);
 
         // Extract roll numbers from CSV data
         const rollNumbers = extractRollNumbers(csvData);
 
        // Fetch events and populate the select dropdown
       
                const formData = {
                    Roll_number: rollNumbers,
                    subject : document.getElementById('subject').value
                };

                // Send form data to the server using fetch
                fetch('/placement/feedback_send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => {
                    // Handle response
                    if (response.ok) {
                        alert("Form Sent Successfully");
                        window.location.reload();
                    } else {
                        // Handle other status codes if needed
                        alert('Failed to Send Form');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to Send Form');
                });
            });

        
     // Function to read the uploaded CSV file
     async function readFile(file) {
         return new Promise((resolve, reject) => {
             const reader = new FileReader();
             reader.onload = (event) => resolve(event.target.result);
             reader.onerror = (error) => reject(error);
             reader.readAsText(file);
         });
     }
 
     function extractRollNumbers(csvData) {
    // Parse CSV data
    const rows = csvData.split('\n');
    const rollNumbers = [];
    let isFirstRow = true; // Flag to skip the first row
    rows.forEach(row => {
        // Skip the first row
        if (isFirstRow) {
            isFirstRow = false;
        }
        // Split the row into columns
        else{
            const columns = row.split(',');
            if (columns.length > 0) {
                rollNumbers.push(columns[0].trim()); // Add roll number from the first column
            }
        }
    });
    return rollNumbers;
}
    </script>

<style>

    
    
    a{
        color:aqua;
    }
    body {
        font-family: Arial, sans-serif;
        background-color: #f0f2f5;
    }
    
    .container {
    max-width: 450px;
    margin: 50px auto;
    padding:  30px 50px;
    border: 2px solid rgba(255,255,255,0.18);
    background: linear-gradient(135deg,rgba(255,255,255,0.1),rgba(255,255,255,0));
    border-radius: 30px;
    backdrop-filter: blur(10px);
    background-position: relative;
    box-shadow: 0 8px 32px 0 rgba(0,0,0,0.37);
    background-image: linear-gradient(to top, #cfd9df 0%, #e2ebf0 100%);
}
    .container h1 {
        text-align: center;
        margin-bottom: 50px;
    }
    
    .container input[type="text"],
    .container input[type="password"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 3px;
    }
    
    .container button {
        width: 100%;
        padding: 10px;
        background-color: #0066cc;
        color: white;
        border: none;
        cursor: pointer;
        border-radius: 3px;
    }
    
    .container button:hover {
        background-color: #003399;
    }
    
    .container .error {
        color: red;
        margin-bottom: 10px;
    }
    label{
        font-weight: bold;
    }
    
    button[type="submit"] {
                width: 100%;
                margin-top: 20px;
                padding: 10px;
                background-color: #007bff;
                color: #fff;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }
    
            button[type="submit"]:hover {
                background-color: #0056b3;
            }

            .dropdown {
  float: left;
  position: bottom;
}

.dropdown1{
    width : 100%;
}

.dropdown-menu{
    display: flex;
    flex-direction: row;
    gap : 50px;
    margin-top: 10px;
}


    </style>
</body>
</html>